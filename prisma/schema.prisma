// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

/**
 * datasource db {
 * provider = "sqlite"
 * url      = env("DATABASE_URL")
 * }
 */

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model LibraryNetwork {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  libraries Library[]
  isActive  Boolean   @default(true)
}

model Library {
  id               String         @id @default(cuid())
  name             String
  slug             String         @unique
  location         String
  libraryNetwork   LibraryNetwork @relation(fields: [libraryNetworkId], references: [id], onDelete: Cascade)
  libraryNetworkId String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  isActive         Boolean        @default(true)
  catalog          Catalog[]
}

model Catalog {
  id        String        @id @default(cuid())
  name      String
  slug      String        @unique
  library   Library       @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  libraryId String
  items     CatalogItem[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  isActive  Boolean       @default(true)
}

/// UNIMARC-Compatible Database Schema
/// --- CORE BIBLIOGRAPHIC STRUCTURE ---
/// Modelo principal que representa um registo UNIMARC completo
model Record {
  id            String         @id @default(cuid())
  metadata      Json
  controlFields ControlField[] /// Campos de controlo (como 001, 005, ...)
  holdings      Holding[]
  dataFields    DataField[] /// Campos de dados (como 100, 245, ...)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model ControlFieldDefinition {
  id                   String                 @id @default(cuid())
  tag                  String                 @unique
  name                 String
  tips                 String[]
  ControlField         ControlField[]
  TemplateControlField TemplateControlField[]
}

/// Modelo que representa um campo de controlo UNIMARC
model ControlField {
  id           String                 @id @default(cuid())
  value        String
  record       Record                 @relation(fields: [recordId], references: [id])
  recordId     String
  definition   ControlFieldDefinition @relation(fields: [definitionId], references: [id])
  definitionId String
}

model DataFieldDefinition {
  id                String               @id @default(cuid())
  tag               String               @unique
  name              String
  ind1Name          String
  ind1Tips          String[]
  ind2Name          String
  ind2Tips          String[]
  tips              String[]
  subFieldDef       SubfieldDefinition[]
  DataField         DataField[]
  TemplateDataField TemplateDataField[]
}

/// Modelo que representa um campo de dados UNIMARC (ex: 100, 245)
model DataField {
  id           String              @id @default(cuid())
  ind1         String /// Primeiro indicador
  ind2         String // Segundo indicador
  record       Record              @relation(fields: [recordId], references: [id])
  recordId     String
  definition   DataFieldDefinition @relation(fields: [definitionId], references: [id])
  definitionId String
  subFields    Subfield[]
}

model SubfieldDefinition {
  id                    String              @id @default(cuid())
  code                  String
  label                 String
  repeatable            Boolean             @default(false)
  mandatory             Boolean             @default(false)
  tips                  String[]
  dataFieldDefinition   DataFieldDefinition @relation(fields: [dataFieldDefinitionId], references: [id])
  dataFieldDefinitionId String
}

/// Modelo que representa um subcampo de um campo de dados UNIMARC
/// Exemplo: No campo 200, podemos ter subcampos como $a (título), $b (subtítulo), etc
model Subfield {
  id          String    @id @default(cuid())
  value       String /// Valor associado ao campo
  dataField   DataField @relation(fields: [dataFieldId], references: [id])
  dataFieldId String
}

model Template {
  id            String                 @id @default(cuid())
  name          String                 @unique /// Ex: Livro, CD, DVD, etc.
  description   String?
  controlFields TemplateControlField[]
  dataFields    TemplateDataField[] /// Campos associados ao template
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
}

model TemplateDataField {
  id           String              @id @default(cuid())
  template     Template            @relation(fields: [templateId], references: [id])
  templateId   String
  definition   DataFieldDefinition @relation(fields: [definitionId], references: [id])
  definitionId String
  defaultInd1  String?
  defaultInd2  String?
  createdAt    DateTime            @default(now())
}

model TemplateControlField {
  id           String                 @id @default(cuid())
  template     Template               @relation(fields: [templateId], references: [id])
  templateId   String
  definition   ControlFieldDefinition @relation(fields: [definitionId], references: [id])
  definitionId String
  createdAt    DateTime               @default(now())
}

/// --- HOLDINGS STRUCTURE ---
model Holding {
  id            String                @id @default(cuid())
  record        Record                @relation(fields: [recordId], references: [id])
  recordId      String
  controlFields HoldingControlField[]
  dataFields    HoldingDataField[]
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  Item          Item[]
}

model HoldingControlField {
  id           String                   @id @default(cuid())
  value        String
  holding      Holding                  @relation(fields: [holdingId], references: [id])
  holdingId    String
  definition   HoldingControlDefinition @relation(fields: [definitionId], references: [id])
  definitionId String
}

model HoldingControlDefinition {
  id                  String                @id @default(cuid())
  tag                 String                @unique
  name                String
  tips                String[]
  holdingControlField HoldingControlField[]
}

model HoldingDataField {
  id           String                @id @default(cuid())
  ind1         String
  ind2         String
  holding      Holding               @relation(fields: [holdingId], references: [id])
  holdingId    String
  definition   HoldingDataDefinition @relation(fields: [definitionId], references: [id])
  definitionId String
  subFields    HoldingSubfield[]
}

model HoldingDataDefinition {
  id               String                      @id @default(cuid())
  tag              String                      @unique
  name             String
  ind1Name         String
  ind1Tips         String[]
  ind2Name         String
  ind2Tips         String[]
  tips             String[]
  subFieldDef      HoldingSubfieldDefinition[]
  holdingDataField HoldingDataField[]
}

model HoldingSubfieldDefinition {
  id                      String                @id @default(cuid())
  code                    String
  label                   String
  repeatable              Boolean               @default(false)
  mandatory               Boolean               @default(false)
  tips                    String[]
  holdingDefinition       HoldingDataDefinition @relation(fields: [holdingDataDefinitionId], references: [id])
  holdingDataDefinitionId String
}

model HoldingSubfield {
  id          String           @id @default(cuid())
  value       String
  dataField   HoldingDataField @relation(fields: [dataFieldId], references: [id])
  dataFieldId String
}

model Item {
  id              String    @id @default(cuid())
  holding         Holding   @relation(fields: [holdingId], references: [id])
  holdingId       String
  barcode         String    @unique /// Código de barras do exemplar
  status          String /// Ex: "Available", "Loaned", "Reserved"
  condition       String? /// Ex: "New", "Used", "Damaged"
  acquisitionDate DateTime?
  loanType        String? /// Ex: "Standard", "Short loan"
  // Podes ainda adicionar:
  // locationCode    String?   // Ex: "Sala A", "Depósito"
  // price           Float?
  // lastSeen        DateTime?
}

/// --- AUTHORITY STRUCTURE ---
/// Modelo que representa names, subjects, etc
model AuthorityRecord {
  id           String   @id @default(cuid())
  type         String /// Ex: "PersonalName", "CorporateName"
  heading      String /// Main heading or name (ex: José Saramago, Universidade do Porto)
  mainEntry    String? /// Main entry of authority (Saramago, José)
  otherForms   String? /// Other forms of name or heading (ex: synonyms, alternate names)
  code         String? /// Authority code (ex: MARC code or internal identifier)
  authorityRef String? /// Reference or link to the authority record (if available)
  description  String? /// Description or biographical note for the authority (ex: Portuguese author)
  relatedTerms Json? /// Additional related terms (ex: variants, other relationships)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

/// Authority Record para heading de Assunto ou Classificação
model SubjectHeading {
  id           String   @id @default(cuid())
  heading      String /// Ex: Literature, History, Art
  code         String /// Subject classification code (ex: CDU)
  relatedTerms Json? /// Additional terms related to the subject
  description  String? /// Description of the subject heading
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

/// Authority Record for Controlled Vocabularies (ex: Genre/ Form)
model GenreFormHeading {
  id          String   @id @default(cuid())
  heading     String /// Ex: Fiction, Poetry, Non-fiction
  code        String /// Genre/Form classification code
  description String? /// Description or notes about the genre/form
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/// Authority Record for Geographic Names
model GeographicName {
  id           String   @id @default(cuid())
  name         String /// Geographic place name (ex: Lisbon, New York)
  country      String /// Country or region (ex: Portugal, USA)
  region       String? /// Specific region or area (ex: Alentejo, Manhattan)
  latitude     Float? /// Latitude coordinate
  longitude    Float? /// Longitude coordinate
  relatedTerms Json? /// Other terms related to this place
  description  String? /// Description about the geographic location
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

/// Additional Authority Records for other categories

/// Authority Record for Corporate Names
model CorporateName {
  id           String   @id @default(cuid())
  name         String /// Corporate name (ex: University of Porto, United Nations)
  abbreviation String? /// Abbreviation or short form (ex: UP, UN)
  relatedTerms Json?
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

/// Authority Record for Uniform Titles
model UniformTitle {
  id           String   @id @default(cuid())
  title        String /// Title of the work (ex: Don Quixote)
  creator      String? /// Creator of the work (ex: Cervantes)
  edition      String?
  date         String?
  relatedTerms Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model CatalogItem {
  id        String   @id @default(cuid())
  type      ItemType
  title     String
  subTitle  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  catalog   Catalog? @relation(fields: [catalogId], references: [id])
  catalogId String?

  book       Book?
  periodical Periodical?
  dvd        DVD?
  vhs        VHS?
  cd         CD?
}

enum ItemType {
  BOOK
  PERIODICAL
  DVD
  VHS
  CD
}

model Author {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books     Book[]
  isActive  Boolean  @default(true)
}

model Publisher {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books     Book[]
  isActive  Boolean  @default(true)
}

model Category {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books     Book[]   @relation("BookCategories")
  isActive  Boolean  @default(true)
}

model Language {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  books     Book[]
}

model Format {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  books     Book[]
}

model Translator {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  books     Book[]
}

model BookStatus {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  books     Book[]
}

model PenaltyRule {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String
  description String
  finePerDay  Float
  minDaysLate Int
  maxDaysLate Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)
}

model Book {
  id              String          @id @default(cuid())
  title           String
  isbn            String          @unique
  publishingDate  DateTime
  edition         Int
  summary         String?
  coverImage      String?
  publishedAt     DateTime?
  pageCount       Int
  createdAt       DateTime        @default(now())
  createdByUser   User?           @relation("CreatedByUser", fields: [createdByUserId], references: [id])
  createdByUserId String?
  updatedAt       DateTime        @updatedAt
  updatedByUser   User?           @relation("UpdatedByUser", fields: [updatedByUserId], references: [id])
  updatedByUserId String?
  isActive        Boolean         @default(true)
  format          Format          @relation(fields: [formatId], references: [id])
  formatId        String
  language        Language        @relation(fields: [languageId], references: [id])
  languageId      String
  publisher       Publisher       @relation(fields: [publisherId], references: [id])
  publisherId     String
  categories      Category[]      @relation("BookCategories")
  author          Author          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        String
  translator      Translator?     @relation(fields: [translatorId], references: [id])
  translatorId    String?
  bookStatus      BookStatus      @relation(fields: [bookStatusId], references: [id])
  bookStatusId    String
  barcodes        Barcode[]
  reviews         Review[]
  recomendations  Recomendation[]
  catalogItem     CatalogItem?    @relation(fields: [catalogItemId], references: [id], onDelete: Cascade)
  catalogItemId   String          @unique
}

model Periodical {
  id              String      @id @default(cuid())
  issn            String      @unique
  issueNumber     String
  volume          String?
  publicationDate DateTime
  catalogItem     CatalogItem @relation(fields: [catalogItemId], references: [id], onDelete: Cascade)
  catalogItemId   String      @unique
}

model DVD {
  id            String      @id @default(cuid())
  director      String
  duration      Int
  studio        String?
  releaseYear   Int?
  rating        String?
  catalogItem   CatalogItem @relation(fields: [catalogItemId], references: [id], onDelete: Cascade)
  catalogItemId String      @unique
}

model VHS {
  id            String      @id @default(cuid())
  director      String?
  duration      Int?
  catalogItem   CatalogItem @relation(fields: [catalogItemId], references: [id], onDelete: Cascade)
  catalogItemId String      @unique
}

model CD {
  id            String      @id @default(cuid())
  artist        String
  trackCount    Int?
  label         String?
  releaseYear   Int?
  catalogItem   CatalogItem @relation(fields: [catalogItemId], references: [id], onDelete: Cascade)
  catalogItemId String      @unique
}

model Barcode {
  id            String         @id @default(cuid())
  code          String         @unique
  book          Book           @relation(fields: [bookId], references: [id])
  bookId        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  isActive      Boolean        @default(true)
  borrowedBooks BorrowedBook[] @relation("BarcodeBorrowedBooks")
}

model BorrowedBook {
  id         String    @id @default(cuid())
  barcode    Barcode   @relation(fields: [barcodeId], references: [id], name: "BarcodeBorrowedBooks")
  barcodeId  String
  user       User      @relation(fields: [userId], references: [id], name: "UserBorrowedBooks")
  userId     String
  borrowedAt DateTime  @default(now())
  dueDate    DateTime
  returnDate DateTime?
  fineValue  Float
  isPaid     Boolean   @default(false)
  isActive   Boolean   @default(true)
}

model Review {
  id           String    @id @default(cuid())
  book         Book      @relation(fields: [bookId], references: [id])
  bookId       String
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  rating       Int
  comment      String?
  createdAt    DateTime  @default(now())
  udatedAt     DateTime  @updatedAt
  isAproved    Boolean   @default(false)
  approvalDate DateTime?
  isActive     Boolean   @default(false)
}

model Recomendation {
  id        String   @id @default(cuid())
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  reason    String?
  createdAt DateTime @default(now())
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
}

model User {
  id             String          @id @default(cuid())
  username       String          @unique
  email          String          @unique
  password       String
  firstName      String
  lastName       String
  address        String
  phoneNumber    String
  idNumber       String
  nifNumber      Int
  profilePicture String?
  role           Role?           @relation(fields: [roleId], references: [id])
  roleId         String?
  lastLogin      DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isActive       Boolean         @default(true)
  booksCreated   Book[]          @relation("CreatedByUser")
  booksUpdated   Book[]          @relation("UpdatedByUser")
  reviews        Review[]
  recomendations Recomendation[]
  borrowedBooks  BorrowedBook[]  @relation("UserBorrowedBooks")
  AuditLog       AuditLog[]
}

model AuditLog {
  id        String   @id @default(cuid())
  entity    String
  entityId  String
  action    String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}
