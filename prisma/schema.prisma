// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Author {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books     Book[]
}

model Publisher {
  id        String   @id @default(cuid())
  name      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books     Book[]
}

model Category {
  id        String   @id @default(cuid())
  name      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books     Book[]   @relation("BookCategories")
}

model Language {
  id        String   @id @default(cuid())
  name      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  books     Book[]
}

model Format {
  id        String   @id @default(cuid())
  name      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  books     Book[]
}

model Translator {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  books     Book[]
}

model BookStatus {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  books     Book[]
}

model PenaltyRule {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String
  description String
  finePerDay  Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)
}

model Book {
  id              String          @id @default(cuid())
  title           String
  isbn            String          @unique
  publishingDate  DateTime
  edition         Int
  summary         String?
  coverImage      String?
  publishedAt     DateTime?
  pageCount       Int
  createdAt       DateTime        @default(now())
  createdByUser   User?           @relation("CreatedByUser", fields: [createdByUserId], references: [id])
  createdByUserId String?
  updatedAt       DateTime        @updatedAt
  updatedByUser   User?           @relation("UpdatedByUser", fields: [updatedByUserId], references: [id])
  updatedByUserId String?
  isActive        Boolean         @default(true)
  format          Format          @relation(fields: [formatId], references: [id])
  formatId        String
  language        Language        @relation(fields: [languageId], references: [id])
  languageId      String
  publisher       Publisher       @relation(fields: [publisherId], references: [id])
  publisherId     String
  categories      Category[]      @relation("BookCategories")
  author          Author          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        String
  translator      Translator?     @relation(fields: [translatorId], references: [id])
  translatorId    String?
  bookStatus      BookStatus      @relation(fields: [bookStatusId], references: [id])
  bookStatusId    String
  barcodes        Barcode[]
  reviews         Review[]
  recomendations  Recomendation[]
}

model Barcode {
  id            String         @id @default(cuid())
  code          String         @unique
  book          Book           @relation(fields: [bookId], references: [id])
  bookId        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  isActive      Boolean        @default(true)
  borrowedBooks BorrowedBook[] @relation("BarcodeBorrowedBooks")
}

model BorrowedBook {
  id         String   @id @default(cuid())
  barcode    Barcode  @relation(fields: [barcodeId], references: [id], name: "BarcodeBorrowedBooks")
  barcodeId  String
  user       User     @relation(fields: [userId], references: [id], name: "UserBorrowedBooks")
  userId     String
  borrowedAt DateTime @default(now())
  dueDate    DateTime
  returnDate DateTime
  fineValue  Float
  isActive   Boolean  @default(true)
}

model Review {
  id           String    @id @default(cuid())
  book         Book      @relation(fields: [bookId], references: [id])
  bookId       String
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  rating       Int
  createdAt    DateTime  @default(now())
  udatedAt     DateTime  @updatedAt
  isAproved    Boolean   @default(false)
  approvalDate DateTime?
  isActive     Boolean   @default(false)
}

model Recomendation {
  id        String   @id @default(cuid())
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  reason    String?
  createdAt DateTime @default(now())
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
}

model User {
  id             String          @id @default(cuid())
  username       String          @unique
  email          String          @unique
  password       String
  firstName      String
  lastName       String
  address        String
  phoneNumber    String
  idNumber       String
  nifNumber      Int
  profilePicture String?
  role           Role?           @relation(fields: [roleId], references: [id])
  roleId         String?
  lastLogin      DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isActive       Boolean         @default(true)
  booksCreated   Book[]          @relation("CreatedByUser")
  booksUpdated   Book[]          @relation("UpdatedByUser")
  reviews        Review[]
  recomendations Recomendation[]
  borrowedBooks  BorrowedBook[]  @relation("UserBorrowedBooks")
  AuditLog       AuditLog[]
}

model AuditLog {
  id        String   @id @default(cuid())
  entity    String
  entityId  String
  action    String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}
